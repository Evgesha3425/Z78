"""
1. Что такое функция?
"""
# Функция - часть кода, которую мы можем вызывать необходимое количество раз. Используется для сокращения кода.
"""
2. Как аргументы передаются в функцию?
"""
# При создании функции, после написания ее имени необходимо использовать круглые скобки (). Если функция создается
# с пустыми скобкамИ, то никакие аргументы передаваться не будут. В случае, если в скобках указаны какие-либо
# параметры, то при вызове функции необходимо передать эти параметры
#
# def foo(name, age):
#     pass
#
# foo("Vasya", 25) - в скобках указаны аргументы функции


"""
3. Что такое аннотации в функциях? Каков их синтаксис?
"""


"""
4. Сколько аргументов можно возвращать из функции?
"""

# Сколько угодно. После написания слова return можно перечислять все аргументы, которые хотим вернуть

"""
5. Что такое оператор return? Сколько операторов return должно быть в функции?
"""

# С помощью оператора return будет происходить выход из функции. return может быть, а может и не быть в return функции.
# Однако после того как тело функции дойдет до return, будет выход из функции

"""
6. Что такое *args и **kwargs в функции?
"""

# args и kwargs два общепринятых слова. Смысл несут не сами слова, а *. Одна звездочка будет использоваться для того
# чтобы была возможность вводить любое количество значений. Тоже самое будет для **, однако в kwargs может
# вводиться любое количество словарей

"""
7. Напишите примеры для встроенных функций map и filter
"""

# lst = [1, '2', 3]
# print(list(map(str, lst)))

"""
8. Что такое lambda функция?
"""

# Однострочкая функция. Также называется анонимной


"""
9. Что такое замыкание?
"""

"""
10. Что такое декоратор функции? Напишите пример простого декоратора?
"""

# декоратор - маска функции. Если есть какая-то функция, навесив на нее декоратор можем изменить ее поведение, не
# изменяя исходную функцию

"""
11. Можно ли написать несколько декораторов для одной функции?
"""

# Можно :)

"""
12. Какие бывают области видимости? Где они применяются?
"""

# Глобальная и локальная. Используются в функциях. В теле функции если не объявить какую-либо переменную или
# какое-то значение через слово global, то переменная будет видна локально, то есть только внутри этой функции.

"""
13. Что такое self в классе?
"""

# self является ссылкой на сам экземпляр данного класса

"""
14. В чём разница между __init__() и __new__()?
"""

# init - конструктор классов. При создании нового класса будет иметь все прописанные в init методы

"""
15. В чем разницa между staticmethod и classmethod?
"""

"""
16. Что такое cls в классе?
"""

"""
17. Назовите известные dunder методы и их свойства?
"""

"""
18. Как в python инкапсуляция? Как она реализована?
"""

# С помощью добавления _ либо __
# Если не использовать подчеркивания, метод является publick
# При использовании _, метод будет являться protect (защещенным). Разработчик видит что он является защищенным и что
# не рекомендуется его изменение.
# При использовании __, метод является privat. Он защищен от изменения (хотя есть и лазейки).
# Для изменения значений (при необходимости) используем геттеры и сеттеры, чтобы не изменять исходные значения

"""
19. Что такое super() в классах?
"""

# Такая функция, позволяющая наследовать необходимые методы у класса родителя. Если было несколько наследований
# от родителя, то будет возможность наследовать их методы от самого главного прородителя

"""
20. Как в python реализовано наследование?
"""

# class A:
#     pass
#
# class B(A):
#     pass

# Класс В наследуется от класса А. Класс А наследуется от класса object

"""
21. Что такое MRO?
"""

"""
22. Что такое абстрактный класс? Для чего он используется?
"""

"""
23. Как в python реализован полиморфизм?
"""

# Может существовать несколько классов, не важно наследуюстя они или отдельно созданы. В каждом классе может
# существовать метод с одним и тем же именем. То есть метод в каждом классе несмотря на одно и то же имя, может
# иметь разное поведение (то, которое мы пропишем в теле)

"""
24. Как в классе реализовано свойство @ property? Для чего оно используется?
"""

"""
25. Что такое Метакласс?
"""

# класс, создающий классы